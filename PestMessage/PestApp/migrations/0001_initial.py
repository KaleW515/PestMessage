# Generated by Django 3.0.3 on 2020-05-18 15:52

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CaptchaCaptchastore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('challenge', models.CharField(max_length=32)),
                ('response', models.CharField(max_length=32)),
                ('hashkey', models.CharField(max_length=40, unique=True)),
                ('expiration', models.DateTimeField()),
            ],
            options={
                'db_table': 'captcha_captchastore',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('comment_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField()),
                ('likenum', models.IntegerField(blank=True, db_column='likeNum', null=True)),
                ('dislikenum', models.IntegerField(blank=True, db_column='disLikeNum', null=True)),
                ('content', models.CharField(blank=True, max_length=200, null=True)),
                ('date', models.CharField(max_length=10)),
            ],
            options={
                'db_table': 'comments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('donation_id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=30)),
                ('user_id', models.IntegerField()),
                ('mask', models.IntegerField(blank=True, null=True)),
                ('suit', models.IntegerField(blank=True, null=True)),
                ('alcohol', models.IntegerField(blank=True, null=True)),
                ('convenient', models.IntegerField(blank=True, null=True)),
                ('water', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'donation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Keywords',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyword', models.CharField(blank=True, db_column='keyWord', max_length=100, null=True, unique=True)),
            ],
            options={
                'db_table': 'keyWords',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('reply_id', models.AutoField(primary_key=True, serialize=False)),
                ('from_user_id', models.IntegerField()),
                ('to_comment_id', models.IntegerField()),
                ('date', models.CharField(max_length=10)),
                ('content', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'reply',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Volunteer',
            fields=[
                ('volunteer_id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=30)),
                ('user_id', models.IntegerField(unique=True)),
                ('qqnum', models.CharField(db_column='qqNum', max_length=10)),
                ('date1', models.CharField(max_length=8)),
                ('date2', models.CharField(max_length=8)),
                ('isdoctor', models.IntegerField(db_column='isDoctor')),
                ('advantage', models.CharField(max_length=20)),
                ('words', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'volunteer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Userinfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phonenumber', models.CharField(db_column='phoneNumber', max_length=11)),
                ('signature', models.CharField(blank=True, max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
